{"title":"skyyhu的博客","description":"code。","language":"","link":"","pubDate":"Sun, 02 Aug 2020 13:16:54 GMT","lastBuildDate":"Tue, 11 Aug 2020 13:17:56 GMT","generator":"hexo-generator-json-feed","webMaster":"skyyhu","items":[{"title":"提取windows10主題壁紙","link":"/2020/08/02/工具/提取windows10主題壁紙/","description":"有时候我们去window10 的应用商店下载主题。 下来下来应用之后发现主题之中的图片还挺好看，我们就想着提取主题中的图片作为windos的壁纸。这个时候我们又不知道这个壁纸存放在电脑那个路径下面。 今天告诉大家这个方法。打开运行框或者我的电脑的路径输入框，输入如下路径 C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\Windows\\Themes 打开这个路径下面的文件夹 打开其中的主题文件夹\\DesktopBackground\\ 就可以看到所有这个主题的图片了","pubDate":"Sun, 02 Aug 2020 13:16:54 GMT","guid":"/2020/08/02/工具/提取windows10主題壁紙/","category":"工具"},{"title":"Hexo yilia使用的几个问题","link":"/2020/06/25/hexo/hexo yilia使用几个问题/","description":"增加归档菜单修改 themes/yilia/_config.yml 123menu: 主页: / 归档: /archives/index.html 添加 categories 到menu菜单在yilia主题下的主配置文件_config.xml中找到menu,并把categories添加进去 1234menu: 主页: / 分类: /categories 归档: /archives","pubDate":"Thu, 25 Jun 2020 05:24:49 GMT","guid":"/2020/06/25/hexo/hexo yilia使用几个问题/","category":"hexo"},{"title":"在线学习网站","link":"/2020/06/07/工具/在线学习网站/","description":"1.RUNOOB https://www.runoob.com/ Java教程 https://www.runoob.com/java/java-tutorial.html JvaScript 教程 https://www.runoob.com/js/js-tutorial.html Linxu教程 https://www.runoob.com/linux/linux-comm-less.html 2.编程词典 http://codingdict.com/ 3. w3cShcool https://www.w3cschool.cn/ https://www.w3school.com.cn/","pubDate":"Sun, 07 Jun 2020 08:46:56 GMT","guid":"/2020/06/07/工具/在线学习网站/","category":"工具"},{"title":"为什么fastjson总报有漏洞","link":"/2020/06/07/Java/为什么fastjson总报有漏洞/","description":"","pubDate":"Sun, 07 Jun 2020 08:37:58 GMT","guid":"/2020/06/07/Java/为什么fastjson总报有漏洞/","category":"Java"},{"title":"Linux less命令","link":"/2020/06/07/Linux/linux-less-命令/","description":"less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。 语法1less [参数] 文件 参数说明： -b &lt;缓冲区大小&gt; 设置缓冲区的大小 -e 当文件显示结束后，自动离开 -f 强迫打开特殊文件，例如外围设备代号、目录和二进制文件 -g 只标志最后搜索的关键词 -i 忽略搜索时的大小写 -m 显示类似more命令的百分比 -N 显示每行的行号 -o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来 -Q 不使用警告音 -s 显示连续空行为一行 -S 行过长时间将超出部分舍弃 -x &lt;数字&gt; 将”tab”键显示为规定的数字空格 /字符串：向下搜索”字符串”的功能 ?字符串：向上搜索”字符串”的功能 n：重复前一个搜索（与 / 或 ? 有关） N：反向重复前一个搜索（与 / 或 ? 有关） b 向上翻一页 d 向后翻半页 h 显示帮助界面 Q 退出less 命令 u 向前滚动半页 y 向前滚动一行 空格键 滚动一页 回车键 滚动一行 [pagedown]： 向下翻动一页 [pageup]： 向上翻动一页","pubDate":"Sun, 07 Jun 2020 08:32:15 GMT","guid":"/2020/06/07/Linux/linux-less-命令/","category":"Linux"},{"title":"Linux 常用命令","link":"/2020/06/03/Linux/Linux-常用命令/","description":"","pubDate":"Wed, 03 Jun 2020 14:33:03 GMT","guid":"/2020/06/03/Linux/Linux-常用命令/","category":"Linux"},{"title":"mac 常用软件列表","link":"/2020/06/03/工具/mac-常用软件列表/","description":"常用软件 Typora markdown文档工具 FastStone Capture for windows 截图工具 QQ 影音 Oracle VM VirtualBox 印象笔记 OneNote xmind 思维导图 开发软件 JDK Android Studio VScode Sublime Text3 Editplus Intelij Idea NotePad++ Cmder Source Tree Git Beyond Compare Eclipse","pubDate":"Wed, 03 Jun 2020 14:16:37 GMT","guid":"/2020/06/03/工具/mac-常用软件列表/","category":"工具"},{"title":"常用快捷键-VSCode","link":"/2020/06/03/工具/VSCode 常用快捷键/","description":"同时打开多个窗口（查看多个项目） 打开一个新窗口： Ctrl+Shift+N 关闭窗口： Ctrl+Shift+W 同时打开多个编辑器（查看多个文件） 新建文件 Ctrl+N 历史打开文件之间切换 Ctrl+Tab，Alt+Left，Alt+Right 切出一个新的编辑器（最多3个）Ctrl+\\，也可以按住Ctrl鼠标点击Explorer里的文件名 左中右3个编辑器的快捷键Ctrl+1 Ctrl+2 Ctrl+3 3个编辑器之间循环切换 Ctrl+` 编辑器换位置，Ctrl+k然后按Left或Right 格式调整 代码行缩进Ctrl+[， Ctrl+] 折叠打开代码块 Ctrl+Shift+[， Ctrl+Shift+] Ctrl+C Ctrl+V如果不选中，默认复制或剪切一整行 代码格式化：Shift+Alt+F，或Ctrl+Shift+P后输入format code 修剪空格Ctrl+Shift+X 上下移动一行： Alt+Up 或 Alt+Down 向上向下复制一行： Shift+Alt+Up或Shift+Alt+Down 在当前行下边插入一行Ctrl+Enter 在当前行上方插入一行Ctrl+Shift+Enter 光标相关 移动到行首：Home 移动到行尾：End 移动到文件结尾：Ctrl+End 移动到文件开头：Ctrl+Home 移动到后半个括号 Ctrl+Shift+] 选中当前行Ctrl+i（双击） 选择从光标到行尾Shift+End 选择从行首到光标处Shift+Home 删除光标右侧的所有字Ctrl+Delete Shrink/expand selection： Shift+Alt+Left和Shift+Alt+Right Multi-Cursor：可以连续选择多处，然后一起修改，Alt+Click添加cursor或者Ctrl+Alt+Down 或 Ctrl+Alt+Up 同时选中所有匹配的Ctrl+Shift+L Ctrl+D下一个匹配的也被选中(被我自定义成删除当前行了，见下边Ctrl+Shift+K) 回退上一个光标操作Ctrl+U 重构代码 跳转到定义处：F12 定义处缩略图：只看一眼而不跳转过去Alt+F12 列出所有的引用：Shift+F12 同时修改本文件中所有匹配的：Ctrl+F12 重命名：比如要修改一个方法名，可以选中后按F2，输入新的名字，回车，会发现所有的文件都修改过了。 跳转到下一个Error或Warning：当有多个错误时可以按F8逐个跳转 查看diff 在explorer里选择文件右键 Set file to compare，然后需要对比的文件上右键选择Compare with ‘file_name_you_chose’. 查找替换 查找 Ctrl+F 查找替换 Ctrl+H 整个文件夹中查找 Ctrl+Shift+F 显示相关 全屏：F11 zoomIn/zoomOut：Ctrl + =/Ctrl + - 侧边栏显/隐：Ctrl+B 预览markdown Ctrl+Shift+V 其他 自动保存：File -&gt; AutoSave ，或者Ctrl+Shift+P，输入 auto","pubDate":"Wed, 03 Jun 2020 14:16:14 GMT","guid":"/2020/06/03/工具/VSCode 常用快捷键/","category":"工具"},{"title":"Windows 常用软件列表","link":"/2020/06/03/工具/Windows-常用软件列表/","description":"常用软件 Typora markdown文档工具 FastStone Capture for windows 截图工具 QQ 影音 Oracle VM VirtualBox 印象笔记 OneNote xmind 思维导图 开发软件 JDK Android Studio VScode Sublime Text3 Editplus Intelij Idea NotePad++ Cmder Source Tree Git Beyond Compare Eclipse","pubDate":"Wed, 03 Jun 2020 14:16:14 GMT","guid":"/2020/06/03/工具/Windows-常用软件列表/","category":"工具"},{"title":"mac 开发利器","link":"/2020/06/03/工具/DevOps/","description":"-","pubDate":"Wed, 03 Jun 2020 14:15:41 GMT","guid":"/2020/06/03/工具/DevOps/","category":""},{"title":"hexo guide","link":"/2020/05/30/hexo/hexo 引导/","description":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing","pubDate":"Sat, 30 May 2020 06:32:47 GMT","guid":"/2020/05/30/hexo/hexo 引导/","category":"hexo"},{"title":"hexo 主题推荐","link":"/2020/05/30/hexo/hexo博客主题/","description":"推荐几个美观的Hexo博客主题。 Hexo官方网站上也收集了一些主题地址：https://hexo.io/themes/","pubDate":"Fri, 29 May 2020 16:27:10 GMT","guid":"/2020/05/30/hexo/hexo博客主题/","category":"hexo"},{"title":"Android Studio 4.0 稳定版","link":"/2020/05/29/Android/Android-Studio-4-0稳定版/","description":"Android Studio 4.0发布了 来了解下Android Studio提供了哪些激动人心的功能吧","pubDate":"Fri, 29 May 2020 14:39:11 GMT","guid":"/2020/05/29/Android/Android-Studio-4-0稳定版/","category":"Android"},{"title":"百度搜索的几个小技巧","link":"/2020/05/29/工具/百度搜索技巧/","description":"分享下百度搜索技巧： 1、 关键词加引号比如我要搜索：人工智能技术，在搜索的时候很有可能会把”人工智能“和“技术”拆分开，然后分别进行搜索，这时候我们可以把关键词放入引号内，就代表完全匹配搜索，也就是所显示的搜索结果一定包含完整的关键词，不会出现近义词和拆分的情况。 2、site：用于搜索指定网站下的关键信息比如我只想在我自己博客网站上搜索“计算”这个信息，我可以使用关键词 site：http://tanqingbo.com 节日 进行搜索，这样搜出来的信息都是我博客上的内容。如下图：","pubDate":"Fri, 29 May 2020 14:37:43 GMT","guid":"/2020/05/29/工具/百度搜索技巧/","category":"工具"},{"title":"Map遍历几种方法","link":"/2020/05/29/Java/Map遍历几种方法/","description":"循环遍历Map的几种方式Java代码 123451. Map&lt;String,String&gt; map=**new** HashMap&lt;String,String&gt;(); 2. map.put(\"username\", \"qq\"); 3. map.put(\"passWord\", \"123\"); 4. map.put(\"userID\", \"1\"); 5. map.put(\"email\", \"qq@qq.com\");","pubDate":"Fri, 29 May 2020 14:18:25 GMT","guid":"/2020/05/29/Java/Map遍历几种方法/","category":"Java"},{"title":"前端开发规范","link":"/2020/05/29/JavaScript/前端代码规范/","description":"","pubDate":"Fri, 29 May 2020 14:12:59 GMT","guid":"/2020/05/29/JavaScript/前端代码规范/","category":"JavaScript"},{"title":"Android 开发规范","link":"/2020/05/29/Android/Android 开发规范/","description":"","pubDate":"Fri, 29 May 2020 14:12:34 GMT","guid":"/2020/05/29/Android/Android 开发规范/","category":"Android"},{"title":"很好的SharedPreferences的工具类","link":"/2020/05/29/Android/SharedPreferences的工具类/","description":"网上看到的一个别人写的shareperfence工具类，挺好用的。我们平常保存一些数据，都会用到SharedPreferences，他是保存在手机里面的， 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798package com.example.shortcut;import android.content.Context;import android.content.SharedPreferences;/*** SharedPreferences的一个工具类，调用setParam就能保存String, Integer, Boolean, Float, Long类型的参数* 同样调用getParam就能获取到保存在手机里面的数据* @author xiaanming * */ public class SharedPreferencesUtils &#123; /** * 保存在手机里面的文件名 */ private static final String FILE_NAME = \"share_date\"; /*** 保存数据的方法，我们需要拿到保存数据的具体类型，然后根据类型调用不同的保存方法* @param context* @param key* @param object */ public static void setParam(Context context , String key, Object object)&#123; String type = object.getClass().getSimpleName(); SharedPreferences sp = context.getSharedPreferences(FILE_NAME, Context.MODE_PRIVATE); SharedPreferences.Editor editor = sp.edit(); if(\"String\".equals(type))&#123; editor.putString(key, (String)object); &#125; else if(\"Integer\".equals(type))&#123; editor.putInt(key, (Integer)object); &#125; else if(\"Boolean\".equals(type))&#123; editor.putBoolean(key, (Boolean)object); &#125; else if(\"Float\".equals(type))&#123; editor.putFloat(key, (Float)object); &#125; else if(\"Long\".equals(type))&#123; editor.putLong(key, (Long)object); &#125; editor.commit(); &#125; /*** 得到保存数据的方法，我们根据默认值得到保存的数据的具体类型，然后调用相对于的方法获取值* @param context* @param key* @param defaultObject* @return */ public static Object getParam(Context context , String key, Object defaultObject)&#123; String type = defaultObject.getClass().getSimpleName(); SharedPreferences sp = context.getSharedPreferences(FILE_NAME, Context.MODE_PRIVATE); if(\"String\".equals(type))&#123; return sp.getString(key, (String)defaultObject); &#125; else if(\"Integer\".equals(type))&#123; return sp.getInt(key, (Integer)defaultObject); &#125; else if(\"Boolean\".equals(type))&#123; return sp.getBoolean(key, (Boolean)defaultObject); &#125; else if(\"Float\".equals(type))&#123; return sp.getFloat(key, (Float)defaultObject); &#125; else if(\"Long\".equals(type))&#123; return sp.getLong(key, (Long)defaultObject); &#125; return null; &#125; &#125;* * 使用也很简单，保存数据 [java] view plain copy 在CODE上查看代码片派生到我的代码片 SharedPreferencesUtils.setParam(this, \"String\", \"xiaanming\"); SharedPreferencesUtils.setParam(this, \"int\", 10); SharedPreferencesUtils.setParam(this, \"boolean\", true); SharedPreferencesUtils.setParam(this, \"long\", 100L); SharedPreferencesUtils.setParam(this, \"float\", 1.1f); 获取数据[java] view plain copy 在CODE上查看代码片派生到我的代码片SharedPreferencesUtils.getParam(TimerActivity.this, \"String\", \"\"); SharedPreferencesUtils.getParam(TimerActivity.this, \"int\", 0); SharedPreferencesUtils.getParam(TimerActivity.this, \"boolean\", false); SharedPreferencesUtils.getParam(TimerActivity.this, \"long\", 0L); SharedPreferencesUtils.getParam(TimerActivity.this, \"float\", 0.0f); ~","pubDate":"Fri, 29 May 2020 14:12:34 GMT","guid":"/2020/05/29/Android/SharedPreferences的工具类/","category":"Android"},{"title":"Android alpha","link":"/2020/05/29/Android/alpha/","description":"alpha 透明度，0为完全透明，1为完全不透明，第一个参数是初始值，第二个是结束值","pubDate":"Fri, 29 May 2020 14:12:34 GMT","guid":"/2020/05/29/Android/alpha/","category":"Android"},{"title":"android 在一个Activity中结束另一个Activity的方法","link":"/2020/05/29/Android/android 在一个Activity中结束另一个Activity的方法/","description":"下面以ActivityB结束ActivityA为例 1、首先在ActivityA中定义一个静态的全局变量 static Activity ActivityA； 2、在ActivityA中的onCreate方法中给ActivityA赋值 ActivityA = this； 3、在ActivityB中，需要结束ActivityA时调用 ActivityA a = new ActivityA();a.ActivityA.finish();","pubDate":"Fri, 29 May 2020 14:12:34 GMT","guid":"/2020/05/29/Android/android 在一个Activity中结束另一个Activity的方法/","category":"Android"},{"title":"Android Studio引用jar及so文件","link":"/2020/05/29/Android/android-Studio引用jar及so文件/","description":"在网上看到讲解android studio讲解jar和so文件添加的方法，觉得写的很好，所以摘抄下来目地是让自己记住这种添加方式，自己实践了也验证了正确性。Android Studio开发入门-引用jar及so文件 一、引用jar文件 1.将jar文件复制、粘贴到app的libs目录中； 2.右键点击jar文件，并点击弹出菜单中的“Add As Library”，将jar文件作为类库添加到项目中； 3.选择指定的类库。 注：如果不执行2、3步，jar文件将不起作用，并且不能使用import语句引用。 二、引用so文件** 网上有很多引用so文件的方法，多数都很麻烦，在KYLE THIELK的博客中找到了一种简单的方法。 1.在“src/main”目录中新建名为“jniLibs”的目录； 2.将so文件复制、粘贴到“jniLibs”目录内。 注：如果没有引用so文件，可能会在程序执行的时候加载类库失败，有类似如下的DEBUG提示： java.lang.UnsatisfiedLinkError: Couldn’t load library xxxx from loader dalvik.system.PathClassLoader 三、致谢及源代码下载** 感谢您看完本文，希望对您有帮助。 源代码是使用百度语音识别引擎的例子，点击这里下载。 注：1.本文使用的Android Studio版本为0.4.6； 2.API KEY及安全KEY我随便改了个，您需要替换成自己申请的KEY才能正常运行； Android Studio开发入门-引用jar及so文件 - Wuya - 博客园Android Studio开发入门-引用jar及so文件 作者：王先荣 最近初学安卓开发，因为以前从未用过JAVA，连基本的语法都要从头开始，所以不太顺利。在尝试使用百度语音识别引擎时遇到了如何引用jar及so文件的问题。在GOOGLE加多次尝试之后，找到了一个比较简单的方法，特介绍如下。 一、引用jar文件** 1.将jar文件复制、粘贴到app的libs目录中； 2.右键点击jar文件，并点击弹出菜单中的“Add As Library”，将jar文件作为类库添加到项目中； 3.选择指定的类库。 注：如果不执行2、3步，jar文件将不起作用，并且不能使用import语句引用。 二、引用so文件** 网上有很多引用so文件的方法，多数都很麻烦，在KYLE THIELK的博客中找到了一种简单的方法。 1.在“src/main”目录中新建名为“jniLibs”的目录； 2.将so文件复制、粘贴到“jniLibs”目录内。 注：如果没有引用so文件，可能会在程序执行的时候加载类库失败，有类似如下的DEBUG提示： java.lang.UnsatisfiedLinkError: Couldn’t load library xxxx from loader dalvik.system.PathClassLoader 三、致谢及源代码下载 感谢您看完本文，希望对您有帮助。 源代码是使用百度语音识别引擎的例子，点击这里下载。 注：1.本文使用的Android Studio版本为0.4.6； 2.API KEY及安全KEY我随便改了个，您需要替换成自己申请的KEY才能正常运行； 3.参考网址：http://www.kylethielk.com/blog/include-native-so-library-in-apk-with-android-studio/","pubDate":"Fri, 29 May 2020 14:12:34 GMT","guid":"/2020/05/29/Android/android-Studio引用jar及so文件/","category":"Android"},{"title":"Android 开发60条技术经验总结","link":"/2020/05/29/Android/android-开发60条技术经验总结/","description":"全部Activity可继承自BaseActivity，便于统一风格与处理公共事件，构建对话框统一构建器的建立，万一需要整体变动，一处修改到处有效。 数据库表段字段常量和SQL逻辑分离，更清晰，建议使用Lite系列框架 LiteOrm 库，超级清晰且重心可以放在业务上不用关心数据库细节。 全局变量放全局类中，模块私有放自己的管理类中，让常量清晰且集中. 不要相信庞大的管理类的东西会带来什么好处，可能是一场灾难，而要时刻注意单一职责原则，一个类专心做好一件事情更为清晰。 如果数据没有必要加载，数据请务必延迟初始化，谨记为用户节省内存，总不会有坏处。 异常抛出，在合适的位置处理或者集中处理，不要搞的到处是catch，混乱且性能低，尽量不要在循环体中捕获异常，以提升性能。 地址引用链长时（3个以上指向）小心内存泄漏，和警惕堆栈地址指向，典型的易发事件是：数据更新了，ListView视图却没有刷新，这时Adapter很可能指向并的并不是你更新的数据容器地址（一般为List）。 8.信息同步：不管是数据库还是网网络操作，新插入的数据注意返回ID（如果没有赋予唯一ID），否则相当于没有同步。 9.多线程操作数据库时，db关闭了会报错，也很可能出现互锁的问题，推荐使用事务，推荐使用自动化的 LiteOrm 库操作。 10.做之前先考虑那些可以公用，资源，layout，类，做一个结构、架构分析以加快开发，提升代码可复用度。 有序队列操作add、delete操作时注意保持排序，否则你会比较难堪喔。 数据库删除数据时，要注意级联操作避免出现永远删不掉的脏数据喔。 关于形参实参：调用函数时参数为基本类型传的是值，即传值；参数为对象传递的是引用，即传址。 listview在数据未满一屏时，setSelection函数不起作用；ListView批量操作时各子项和视图正确对应，可见即所选。 15 控制Activity的代码量，保持主要逻辑清晰。其他类遵守SRP（单一职能），ISP（接口隔离）原则。 arraylist执行remove时注意移除int和Integer的区别。你懂得。 Log请打上Tag，调试打印一定要做标记，能定位打印位置，否则尴尬是：不知道是哪里在打印。 码块/常量/资源可以集中公用的一定共用，即使共用逻辑稍复杂一点也会值得，修改起来很轻松，修改一种，到处有效。 setSelection不起作用，尝试smoothScrollToPosition。ListView的LastVisiblePosition（最后一个可见子项）会随着getView方法执行位置不同变动而变。 20.与Activity通讯使用Handler更方便； 如果你的框架回调链变长，考虑监听者模式简化回调。 21.监听者模式不方便使用时，推荐EventBus框架库，使用时间总线，没接触过的同学可以自行脑补一下哦。 Handler在子线程线程使用Looper.prepare，或者new的时候给构造函数传入MainLooper来确保在主线程run。 timepicker 点击确定后需要clearFocus才能获取手动输入的时间。 构造函数里面极度不推荐启动异步线程，会埋下隐患。比如：异步线程调用了本例的示例，就会悲剧等着崩溃吧。 千万不要理所当然的以为一个对象不会为空，充分的做好容错处理；另外注意null也可以插入ArrayList等容器中。 ExpandableListView的子列表不能点击（禁用）要把Adapter的isChildSelectable方法返回true。 UI显示注意内容过长的情形要提前使用ScrollView否则在小手机上尴尬你懂得。 注意按钮的感应范围不小于9mm否则不易点击；输入框注意光标的位置更易用户输入。 服务器和客户端尽量统一唯一标识（有可能是ID），否则多少会有歧义和问题。 注释，尽量去写足够的注释，去描述一下思路，达到看了可以明白某一块代码的效果。 完整型数据一定要用Sqlite的Transaction，大数据一定要用。粗略测试插入100个数据有20倍的提速，插入1000个数据就有100多倍的提速。 避免String=”null”的情况出现String = null,=””都可以。避免出现title=”无主题”这样的数据提交到数据库浪费空间。 存在多个不同的dbhelper实例情况下，sqlitedatabase对象必然存在不同的实例，多线程同时写入数据，轮流写入数据时会不定时的报db is locked，引起崩溃，不管是操作同张表还是异表。读和写可以同时并发，轮流无规律的交替执行。同时写入数据时解决方案是用并发的每个线程都用事务，db则不会lock，按次整体写入。 建议整个应用维护一个dbhelper实例，只要db没有关闭，全局就只有一个db实例，多线程并发写入db不会lock，严格交替进行写入：123123123。。。（123代表不同线程，轮流插入一个记录），读和写均不会锁住db，读写交替并没有规律，执行次数和程度看cpu分配给哪个线程的时间片长。 一个任务使用事务嵌套N个事务，N个事务中有一个失败，这个任务整体失败，全部成功后，数据才写入，具有安全性，整体性。并且事务写入大批量数据的效率经实际测试成百上千倍的高于一般的单个写入。数据库大量数据、多线程操作建议使用 LiteOrm 数据库框架，更稳定简单。 经常需要用ListView或者其它显示大量Items的控件实时跟踪或者查看信息，并且希望最新的条目可以自动滚动到可视范围内。通过设置的控件transcriptMode属性可以将 Android 平台的控件（支持ScrollBar）自动滑动到最底部。 Long a; 判断a有没有赋值，if(a == 0)在a没有赋值情况下会报错。应该if(a == null)，Integer、Floag等也一样，原因你懂，只是提醒你要小心喔。 编码遇到读写、出入等逻辑要双向考虑，文件导入导出，字符字节相互转换都要两边转码。 一个 int 值与一个 Integer 对象（能包含 int 值的最小对象）的大小比率约为 1:4（32位和64位机器有不同）。额外的开销源于 JVM 用于描述 Java 对象的元数据也就是 Integer，（Long、Double等也是）。 对象由元数据和数据组成。元数据包括类（指向类的指针，描述了类的类型），标记（描述了对象状态，如散列码、形状等），锁（对象同步信息）。数组对象还包括大小的元数据。 一个在 32 位 Java 运行时中使用 1GB Java 堆的 Java 应用程序在迁移到 64 位 Java 运行时之后，通常需要使用 1.7GB 的 Java 堆。 Hash 集合的访问性能比任何 List 的性能都要高，但每条目的成本也要更高。由于访问性能方面的原因，如果您正在创建大集合（例如，用于实现缓存），那么最好使用基于 Hash 的集合，而不必考虑额外的开销。 对于并不那么注重访问性能的较小集合而言，List 则是合理的选择。ArrayList 和 LinkedList 集合的性能大体相同，但其内存占用完全不同：ArrayList 的每条目大小要比 LinkedList 小得多，但它不是准确设置大小的。List 要使用的正确实现是 ArrayList 还是 LinkedList 取决于 List 长度的可预测性。如果长度未知，那么正确的选择可能是 LinkedList，因为集合包含的空白空间更少。如果大小已知或可预知或比较小，那么 ArrayList 的内存开销会更低一些。 选择正确的集合类型使你能够在集合性能与内存占用之间达到合理的平衡。除此之外，你可以通过正确调整集合大小来最大化填充率、最小化未得到利用的空间，从而最大限度地减少内存占用。 充分利用封装（提供接口类来控制访问数据）和委托（helper对象来实施任务）两种理念。 延迟分配 Hashtable：如果 Hashtable 为空是经常发生的普遍现象，那么仅在存在需要存储的数据时分配 Hashtable 应该是一种合理的做法。将 Hashtable 分配为准确的大小：虽然会有默认大小，但建议使用更为准确的初始大小。 EditText在setText时不要忘记是否需要setSelection。在大多数情况下是需要设置的。 XML两种情况要注意：1 属性名字时候有重复；2 注意文本是否包含非法字符，注意使用CDATA包裹。 当逻辑没有明显问题时考虑对象属性、函数参数、网络传输参数是否全部了解，是否设置正确。 当出现编译或者运行时错误，别人那没问题时，考虑你的编译环境和环境版本是否有问题。 由于String类的immutable性质，当String变量需要经常变换其值时，应该考虑使用StringBuilder提升性能，多线程使用StringBuffer操作string提高程序效率。 java 栈的优势是比堆速度快，可共享，主要存放临时变量、参数等，堆的优势是可动态分配内存大小。 只要是用new()来新建对象的，都会在堆中创建，而且其数据是单独存值的，即使与栈中的数据（值）相同，也不会与栈中的数据共享。 基本数据类型定义的变量称自动变量，存的是‘字面值’，存在于栈中，可共享（存在即不新建）。 多个RandomAccessFile对象指向同一个文件，可使用多个线程一起写入无需再自己加锁，经试验结论：三个线程分别写入100万次数据，使用锁约12秒，不使用约8.5秒。100个线程分别写入1万次数据使用锁耗时约4.2秒，不使用锁耗时约3秒。 XmlPullParser解析慎用nextText()方法，xml比较复杂，含有空标签、重复名字标签时容易出现异常问题；TEXT中使用getText()方法代替START_TAG中使用nextText()方法；START_TAG，TEXT，END_TAG三个事件配合使用。注意每个xml节点之间（不管是开始节点还是结束节点）都会出现TEXT事件。 改变逻辑的时候考虑全部用到这项功能的地方，分散的地方多了，容易大意。 当系统原生组件出现问题时，查看错误栈信息，自己写一个该组件的子类，并在合适的地方将出错方法复写一下，加上try catch保证不崩溃掉。不要扰乱了该系统控件的正常逻辑。 输入控件注意对空格、换行等符号的控制；输入框里内容注意和左右控件的空间，防止误点击。 注意函数参数里的++或者–操作。是++c 还是 c++，区别很大。 各种地方、永远的不要小看null指针问题，甚至有些场合宁可错杀（try catch），不可放过。","pubDate":"Fri, 29 May 2020 14:12:34 GMT","guid":"/2020/05/29/Android/android-开发60条技术经验总结/","category":"Android"},{"title":"Android 5x","link":"/2020/05/29/Android/android5x/","description":"Toast 中使用Contrext 是使用Application的Context好 还是Activity的Context好 多个请求的时候 进度条怎么显示 是一个一个显示还是只显示第一个 AlarmManager 是什么东西 IntentService 和Service有什么不同 Java静态代码块static执行顺序 android自定义view File 文件流 view.getViewTreeObserver().addOnGlobalLayoutListener 图片的信息exif 信息 MarkDown 语法 、IOException android:drawableLeft=”@drawable/icon_about” 如何把从服务器获取的名字匹配drawable里的图片？如：（网络获取的名字“展示”，从drawable里获取相应的图片（zhanshi.png）） 反射去获取这个方法就是通过反射获取指定图片名字的资源Id的方法 public static int getDrawableResourceId(String name){ try(){ Field field=R.drawable.class.getField(name); return field.getInt（null); }catch(NoSuchFieldException e) e.printStackTrace(); }catch(IllegalAccessException e) e.printStackTrace(); }catch(IllegalAragumentException e) e.printStackTrace(); } return -1; MeasureSpec.UNSPECIFIED 和almost、extra区别 Android 5.x Material Design设计风格1.Android5.x新特性之 RecyclerView/CardView/Palette/FloatButton dependencies { compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;) compile &apos;com.android.support:recyclerview-v7:21.0.3&apos; compile &apos;com.android.support:cardview-v7:21.0.3&apos; compile &apos;com.android.support:palette-v7:22.2.0&apos; } Android5.x新特性之 Toolbar和Theme的使用 3.谷歌推出了Android Design Support Library 库，全面支持MD设计风格的UI效果。Design Support Library库吸收了8 个新的 material design 组件！最低支持 Android2.1，其实很多组件都是Github上比较火的，只是谷歌把它官方化了，便于开发者使用。今天我们来学习FloatingActionButton，TextInputLayout，Snackbar，TabLayout 四种控件。 这篇博客我们继续学习Design库中的其他四个组件，分别是AppBarLayout，NavigationView，CoordinatorLayout，CollapsingToolbarLayout。同样，你需要在你的工程中引入compile ‘com.android.support:design:22.2.0’ Drawerlayout和NavigationView实现优雅的Google范儿侧边栏 总的来说：AppBarLayout、CollapsingToolbarLayout、CoordinatorLayout、FloatingActionButton、NavigationView、Snackbar、TabLayout、TextInputLayout、 listview &lt;com.welearn.banzhuren.view.XListView android:id=”@+id/answer_list” android:layout_width=”match_parent” android:layout_height=”wrap_content” android:cacheColorHint=”@android:color/transparent” android:divider=”@color/answer_list_diver” android:fadingEdge=”none” android:fastScrollEnabled=”false” android:footerDividersEnabled=”false” android:headerDividersEnabled=”false” android:listSelector=”@android:color/transparent” android:scrollbars=”none” /&gt; notification和notification.Builder() ######自定义属性的使用做Android布局是件很享受的事，这得益于他良好的xml方式。使用xml可以快速有效的为软件定义界面。可是有时候我们总感觉官方定义的一些基本组件不够用，自定义组件就不可避免了。那么如何才能做到像官方提供的那些组件一样用xml来定义他的属性呢？现在我们就来讨论一下他的用法。 一、在res/values文件下定义一个attrs.xml文件，代码如下： 二、在布局xml中如下使用该属性: &lt;cn.zzm.toolbar.ToolBar android:id=”@+id/gridview_toolbar” android:layout_width=”fill_parent” android:layout_height=”wrap_content” android:layout_alignParentBottom=”true” android:background=”@drawable/control_bar” android:gravity=”center” toolbar:buttonNum=”5” toolbar:itemBackground=”@drawable/control_bar_item_bg”/&gt; 三、在自定义组件中，可以如下获得xml中定义的值： TypedArray a = context.obtainStyledAttributes(attrs,R.styleable.ToolBar);buttonNum = a.getInt(R.styleable.ToolBar_buttonNum, 5);itemBg = a.getResourceId(R.styleable.ToolBar_itemBackground, -1); a.recycle(); 就这么简单的三步，即可完成对自定义属性的使用。 好了，基本用法已经讲完了，现在来看看一些注意点和知识点吧。 首先来看看attrs.xml文件。 该文件是定义属性名和格式的地方，需要用包围所有属性。其中name为该属性集的名字，主要用途是标识该属性集。那在什么地方会用到呢？主要是在第三步。看到没？在获取某属性标识时，用到”R.styleable.ToolBar_buttonNum”，很显然，他在每个属性前面都加了”ToolBar_”。 在来看看各种属性都有些什么类型吧：string , integer , dimension , reference , color , enum. 前面几种的声明方式都是一致的，例如：。只有enum是不同的，用法举例： 如果该属性可同时传两种不同的属性，则可以用“|”分割开即可。 让我们再来看看布局xml中需要注意的事项。 首先得声明一下：xmlns:toolbar=http://schemas.android.com/apk/res/cn.zzm.toolbar注意，“toolbar”可以换成其他的任何名字，后面的url地址必须最后一部分必须用上自定义组件的包名。自定义属性了，在属性名前加上“toolbar”即可。 最后来看看java代码中的注意事项。 在自定义组件的构造函数中，用 TypedArray a = context.obtainStyledAttributes(attrs,R.styleable.ToolBar); 来获得对属性集的引用，然后就可以用“a”的各种方法来获取相应的属性值了。这里需要注意的是，如果使用的方法和获取值的类型不对的话，则会返回默认值。因此，如果一个属性是带两个及以上不用类型的属性，需要做多次判断，知道读取完毕后才能判断应该赋予何值。当然，在取完值的时候别忘了回收资源哦！ 自定义控件的一些apiPaint:canvas:rect:onMeasure()–&gt;widthMeasureSpeconDraw()–&gt;heightMeasureSpecgetMeasuredWidth(), getMeasuredHeight() 单例类传入context，context有回调的时候内存泄露问题uri和url的区别​","pubDate":"Fri, 29 May 2020 14:12:34 GMT","guid":"/2020/05/29/Android/android5x/","category":"Android"},{"title":"","link":"/2020/05/29/Android/android中引用资源解释/","description":"一.@代表引用资源 1.引用自定义资源。格式：@[package:]type/name android：text=”@string/hello” 2.引用系统资源。格式：@android:type/name android:textColor=&quot;@android:color/opaque_red&quot; 注意：其实@android:type/name是@[package:]type/name 的一个子类 二.@代表引用系统的非public资源。格式：@android:type/name 系统资源定义分public和非public。public的声明在： \\platforms\\android-8\\data\\res\\values\\public.xml @*android:type/name：可以调用系统定义的所有资源 @android:type/name：只能够调用publi属性的资源。 注意：没在public.xml中声明的资源是google不推荐使用的。 三.？代表引用主题属性 另外一种资源值允许你引用当前主题中的属性的值。这个属性值只能在style资源和XML属性中使用；它允许你通过将它们改变为当前主题提供的标准变化来改变UI元素的外观，而不是提供具体的值。例如： android:textColor=”?android:textDisabledColor” 注意，这和资源引用非常类似，除了我们使用一个”?”前缀代替了”@”。当你使用这个标记时，你就提供了属性资源的名称，它将会在主题中被查找，所以你不需要显示声明这个类型(如果声明，其形式就是?android:attr/android:textDisabledColor)。除了使用这个资源的标识符来查询主题中的值代替原始的资源，其命名语法和”@”形式一致：?[namespace:]type/name，这里类型可选。 四.@+代表在创建或引用资源 。格式：@+type/name 含义：”+”表示在R.java中名为type的内部类中添加一条记录。如&quot;@+id/button&quot;的含义是在R.java 文件中的id 这个静态内部类添加一条常量名为button。该常量就是该资源的标识符。如果标示符（包括系统资源）已经存在则表示引用该标示符。最常用的就是在定义资源ID中，例如： @+id/资源ID名 新建一个资源ID @id/资源ID名 应用现有已定义的资源ID，包括系统ID @android:id/资源ID名 引用系统ID，其等效于@id/资源ID名 android:id=”@+id/selectdlg” android:id=”@android:id/text1” android:id=”@id/button3”","pubDate":"Fri, 29 May 2020 14:12:34 GMT","guid":"/2020/05/29/Android/android中引用资源解释/","category":"Android"},{"title":"Android 获取系统颜色","link":"/2020/05/29/Android/android取系统颜色值/","description":"在android中?android与@android有什么区别，可能很少人去纠结这个问题，只是大家在使用上更多的去使用@android:color, 比如给TextView设置颜色 12android:textColor=\"?android:color/black\"android:textColor=\"@android:color/black\" 事实上这两种都是对的，百度上有个回答了这个问题 ?android与@android的区别是什么？ android:textAppearance=”?android:textAppearanceMedium” android:textAppearance=”@android:style/TextAppearance.Medium”不一样吗？？？ 不一样，但效果可能一样。 android开发者中有相关说明(Referencing style attributes). @android引用系统资源， ?android 引用本应用theme内的资源。在自定义theme时， 一些未自定义的缺省的属性则相当于引用系统资源","pubDate":"Fri, 29 May 2020 14:12:34 GMT","guid":"/2020/05/29/Android/android取系统颜色值/","category":"Android"}]}